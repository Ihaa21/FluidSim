https://github.com/andrewkchan/fire-simulation
https://www.reddit.com/r/PixelArt/comments/5kua86/oc_pixel_art_fireball_simulated_in_realtime_using/
https://www.youtube.com/watch?v=1iY16Nc0HlI&ab_channel=Asbj%C3%B8rnLystrup
https://pastebin.com/c3WvEdWc
https://marketplace.yoyogames.com/assets/5232/fluid-dynamics-gm-studio-1
https://pastebin.com/da6YsRDg
https://pastebin.com/TyTpYD2K
https://pastebin.com/t847KCCk
https://pastebin.com/iVN6eewc
https://pastebin.com/XW6yNRnV
https://pastebin.com/5qF75HMe
https://hal.inria.fr/file/index/docid/596050/filename/PreprintSFFGuayColinEgli.pdf
https://developer.nvidia.com/gpugems/gpugems3/part-v-physics-simulation/chapter-30-real-time-simulation-and-rendering-3d-fluids
https://developer.nvidia.com/gpugems/gpugems/part-vi-beyond-triangles/chapter-38-fast-fluid-dynamics-simulation-gpu
https://developer.nvidia.com/gpugems/gpugems3/part-i-geometry/chapter-1-generating-complex-procedural-terrains-using-gpu
https://www.reddit.com/r/GraphicsProgramming/comments/mf8hix/fire_fluid_simulation_question/
https://github.com/andrewkchan/fire-simulation/blob/master/shaders/splatShader.glsl
http://graphics.stanford.edu/papers/fire-sg02/fire_final.pdf

=========================

varying vec2 v_vTexcoord;
 
uniform sampler2D texture_material_1;
uniform vec2 texel_size;
 
void main() {
    float reaction_coordinate = texture2D(gm_BaseTexture, floor(v_vTexcoord / (texel_size * 2.0)) * (texel_size * 2.0)).w;
    gl_FragColor = vec4(mix(vec3(1.0, 0.58, 0.0), vec3(1.0, 0.7, 0.4), (((reaction_coordinate - 0.55) * 10.0 + 0.5) * 2.0)), reaction_coordinate);
    gl_FragColor.rgb = vec3(1.0, 0.2, 0.0);
    if (gl_FragColor.a > 0.37) gl_FragColor.rgb = vec3(1.0, 0.8, 0.0);
    if (gl_FragColor.a > 0.65) gl_FragColor.rgb = vec3(1.0, 1.0, 1.0);
    gl_FragColor.a = float(gl_FragColor.a > 0.1);
}

===========================

var temporary;
 
draw_enable_alphablend(false);
 
    // Advect velocity.
    surface_set_target(sf_temporary_0);
        if (maccormack_amount_velocity > 0) {
            shader_set(sh_advect_velocity_maccormack);
                texture_set_stage(shader_get_sampler_index(sh_advect_velocity_maccormack, "texture_world"), surface_get_texture(sf_world));
                texture_set_stage(shader_get_sampler_index(sh_advect_velocity_maccormack, "texture_material"), surface_get_texture(sf_material_0));
                shader_set_uniform_f(shader_get_uniform(sh_advect_velocity_maccormack, "texel_size"), sf_texel_width, sf_texel_height);
                shader_set_uniform_f(shader_get_uniform(sh_advect_velocity_maccormack, "dissipation"), velocity_dissipation);
                shader_set_uniform_f(shader_get_uniform(sh_advect_velocity_maccormack, "acceleration"), 0, acceleration_y);
                shader_set_uniform_f(shader_get_uniform(sh_advect_velocity_maccormack, "time_step"), time_step);
                shader_set_uniform_f(shader_get_uniform(sh_advect_velocity_maccormack, "maccormack_amount"), maccormack_amount_velocity);
                shader_set_uniform_f(shader_get_uniform(sh_advect_velocity_maccormack, "mode"), mode);
                draw_surface(sf_velocity, 0, 0);
            shader_reset();        
        } else {
            shader_set(sh_advect_velocity);
                texture_set_stage(shader_get_sampler_index(sh_advect_velocity, "texture_world"), surface_get_texture(sf_world));
                texture_set_stage(shader_get_sampler_index(sh_advect_velocity, "texture_material"), surface_get_texture(sf_material_0));
                shader_set_uniform_f(shader_get_uniform(sh_advect_velocity, "texel_size"), sf_texel_width, sf_texel_height);
                shader_set_uniform_f(shader_get_uniform(sh_advect_velocity, "dissipation"), velocity_dissipation);
                shader_set_uniform_f(shader_get_uniform(sh_advect_velocity, "acceleration"), 0, acceleration_y);
                shader_set_uniform_f(shader_get_uniform(sh_advect_velocity, "time_step"), time_step);
                draw_surface(sf_velocity, 0, 0);
            shader_reset();
        }
    surface_reset_target();
    temporary = sf_velocity; sf_velocity = sf_temporary_0; sf_temporary_0 = temporary;
 
    // Calculates divergence of velocity.
    surface_set_target(sf_temporary_0);
        shader_set(sh_calculate_divergence);
            shader_set_uniform_f(shader_get_uniform(sh_calculate_divergence, "texel_size"), sf_texel_width, sf_texel_height);
            draw_surface(sf_velocity, 0, 0);
        shader_reset();
    surface_reset_target();
    temporary = sf_divergence; sf_divergence = sf_temporary_0; sf_temporary_0 = temporary;
 
    // Clears pressure.
    surface_set_target(sf_pressure);
        draw_clear_alpha($0000C0, 0);
    surface_reset_target();
 
    // Calculates pressure with jacobi iteration.
    shader_set(sh_calculate_pressure);
        texture_set_stage(shader_get_sampler_index(sh_calculate_pressure, "texture_divergence"), surface_get_texture(sf_divergence));
        shader_set_uniform_f(shader_get_uniform(sh_calculate_pressure, "texel_size"), sf_texel_width, sf_texel_height);
        repeat (pressure_jacobi_iterations) {
            surface_set_target(sf_temporary_0);
                draw_surface(sf_pressure, 0, 0);
            surface_reset_target();
            temporary = sf_pressure; sf_pressure = sf_temporary_0; sf_temporary_0 = temporary;
        }
    shader_reset();
 
    // Calculates the gradient of pressure and subtracts it from the velocity.
    surface_set_target(sf_temporary_0);
        shader_set(sh_subtract_pressure_gradient);
            texture_set_stage(shader_get_sampler_index(sh_subtract_pressure_gradient, "texture_pressure"), surface_get_texture(sf_pressure));
            shader_set_uniform_f(shader_get_uniform(sh_subtract_pressure_gradient, "texel_size"), sf_texel_width, sf_texel_height);
            draw_surface(sf_velocity, 0, 0);
        shader_reset();
    surface_reset_target();
    temporary = sf_velocity; sf_velocity = sf_temporary_0; sf_temporary_0 = temporary;
 
    // Advects material.
    if (mode == 2) {
        surface_set_target_ext(0, sf_temporary_0);
        surface_set_target_ext(1, sf_temporary_1);
            shader_set(sh_advect_material_smoke);
                texture_set_stage(shader_get_sampler_index(sh_advect_material_smoke, "texture_material_1"), surface_get_texture(sf_material_1));
                texture_set_stage(shader_get_sampler_index(sh_advect_material_smoke, "texture_velocity"), surface_get_texture(sf_velocity));
                texture_set_stage(shader_get_sampler_index(sh_advect_material_smoke, "texture_world"), surface_get_texture(sf_world));
                shader_set_uniform_f(shader_get_uniform(sh_advect_material_smoke, "texel_size"), sf_texel_width, sf_texel_height);
                shader_set_uniform_f(shader_get_uniform(sh_advect_material_smoke, "dissipation"), material_dissipation);
                shader_set_uniform_f(shader_get_uniform(sh_advect_material_smoke, "time_step"), time_step);
                shader_set_uniform_f(shader_get_uniform(sh_advect_material_smoke, "maccormack_amount"), maccormack_amount_material);
                draw_surface(sf_material_0, 0, 0);
            shader_reset();
        surface_reset_target();
        temporary = sf_material_0; sf_material_0 = sf_temporary_0; sf_temporary_0 = temporary;
        temporary = sf_material_1; sf_material_1 = sf_temporary_1; sf_temporary_1 = temporary;        
    } else {
        surface_set_target_ext(0, sf_temporary_0);
        surface_set_target_ext(1, sf_temporary_1);
            if (maccormack_amount_material > 0) {
                shader_set(sh_advect_material_maccormack);
                    texture_set_stage(shader_get_sampler_index(sh_advect_material_maccormack, "texture_material_1"), surface_get_texture(sf_material_1));
                    texture_set_stage(shader_get_sampler_index(sh_advect_material_maccormack, "texture_velocity"), surface_get_texture(sf_velocity));
                    texture_set_stage(shader_get_sampler_index(sh_advect_material_maccormack, "texture_world"), surface_get_texture(sf_world));
                    shader_set_uniform_f(shader_get_uniform(sh_advect_material_maccormack, "texel_size"), sf_texel_width, sf_texel_height);
                    shader_set_uniform_f(shader_get_uniform(sh_advect_material_maccormack, "dissipation"), material_dissipation);
                    shader_set_uniform_f(shader_get_uniform(sh_advect_material_maccormack, "time_step"), time_step);
                    shader_set_uniform_f(shader_get_uniform(sh_advect_material_maccormack, "maccormack_amount"), maccormack_amount_material);
                    draw_surface(sf_material_0, 0, 0);
                shader_reset();        
            } else {
                shader_set(sh_advect_material);
                    texture_set_stage(shader_get_sampler_index(sh_advect_material, "texture_material_1"), surface_get_texture(sf_material_1));
                    texture_set_stage(shader_get_sampler_index(sh_advect_material, "texture_velocity"), surface_get_texture(sf_velocity));
                    texture_set_stage(shader_get_sampler_index(sh_advect_material, "texture_world"), surface_get_texture(sf_world));
                    shader_set_uniform_f(shader_get_uniform(sh_advect_material, "texel_size"), sf_texel_width, sf_texel_height);
                    shader_set_uniform_f(shader_get_uniform(sh_advect_material, "dissipation"), material_dissipation);
                    shader_set_uniform_f(shader_get_uniform(sh_advect_material, "time_step"), time_step);
                    draw_surface(sf_material_0, 0, 0);
                shader_reset();
            }
        surface_reset_target();
        temporary = sf_material_0; sf_material_0 = sf_temporary_0; sf_temporary_0 = temporary;
        temporary = sf_material_1; sf_material_1 = sf_temporary_1; sf_temporary_1 = temporary;
    }
 
draw_enable_alphablend(true);

=============================

struct PS_INPUT {
    float2 uv: TEXCOORD0;
};
 
struct PS_OUTPUT {
    float4 color_0: SV_TARGET0;
};
 
uniform sampler2D texture_world;
uniform sampler2D texture_material;
uniform float2 acceleration;
uniform float2 texel_size;
uniform float time_step;
uniform float maccormack_amount;
uniform float dissipation;
uniform float mode;
 
float2 unpack_velocity(float4 data) {return float2(data.x + (data.y / 255.0), data.z + (data.w / 255.0));}
float4 pack_velocity(float2 data) {return float4(floor(data.x * 255.0) / 255.0, frac(data.x * 255.0), floor(data.y * 255.0) / 255.0, frac(data.y * 255.0));}
float unpack_density(float4 data) {return data.x + (data.y / 255.0) + (data.z / (255.0 * 255.0)) + (data.w / (255.0 * 255.0 * 255.0));}
float4 pack_density(float data) {return float4(floor(data * 255.0) / 255.0, frac(data * 255.0), frac(data * 255.0 * 255.0), frac(data * 255.0 * 255.0 * 255.0));}
 
void main(in PS_INPUT IN, out PS_OUTPUT OUT) {
    float velocity_range = 10.0;
 
    float2 velocity = (unpack_velocity(tex2D(gm_BaseTexture, IN.uv)) - 128.0 / 255.0) * velocity_range;
 
    float2 was = IN.uv - time_step * texel_size * velocity;
    float2 phi_hat_next = (unpack_velocity(tex2D(gm_BaseTexture, was)) - 128.0 / 255.0) * velocity_range;
    float2 phi_hat_now = (unpack_velocity(tex2D(gm_BaseTexture, IN.uv + time_step * texel_size * phi_hat_next)) - 128.0 / 255.0) * velocity_range;
    float2 phi_next = phi_hat_next + 0.5 * (velocity - phi_hat_now) * maccormack_amount;
    velocity = phi_next;
 
    // Clamps velocity.
    float2 coord = round(was / texel_size) * texel_size;
    float2 top_left = (unpack_velocity(tex2D(gm_BaseTexture, coord - 0.5 * texel_size)) - 128.0 / 255.0) * velocity_range;
    float2 bottom_right = (unpack_velocity(tex2D(gm_BaseTexture, coord + 0.5 * texel_size)) - 128.0 / 255.0) * velocity_range;
    float2 top_right = (unpack_velocity(tex2D(gm_BaseTexture, coord + float2(0.5 * texel_size.x, -0.5 * texel_size.y))) - 128.0 / 255.0) * velocity_range;
    float2 bottom_left = (unpack_velocity(tex2D(gm_BaseTexture, coord + float2(-0.5 * texel_size.x, 0.5 * texel_size.y))) - 128.0 / 255.0) * velocity_range;
    velocity.x = clamp(velocity.x, min(min(min(top_left.x, top_right.x), bottom_left.x), bottom_right.x), max(max(max(top_left.x, top_right.x), bottom_left.x), bottom_right.x));
    velocity.y = clamp(velocity.y, min(min(min(top_left.y, top_right.y), bottom_left.y), bottom_right.y), max(max(max(top_left.y, top_right.y), bottom_left.y), bottom_right.y));
 
    velocity *= dissipation;
 
    if (mode == 2.0) {
        velocity += float2(0.0, -0.3) * (tex2D(texture_material, IN.uv).w) * (tex2D(texture_material, IN.uv).w - 0.2);
    }
 
    if (tex2D(texture_world, IN.uv).w != 0.0) velocity = float2(0.0, 0.0);
 
    OUT.color_0 = pack_velocity(saturate(velocity / velocity_range + 128.0 / 255.0));
}

===================================

struct PS_INPUT {
    float2 uv: TEXCOORD0;
};
 
struct PS_OUTPUT {
    float4 color_0: SV_TARGET0;
};
 
uniform float2 texel_size;
 
float2 unpack_velocity(float4 data) {return float2(data.x + (data.y / 255.0), data.z + (data.w / 255.0));}
float4 pack_velocity(float2 data) {return float4(floor(data.x * 255.0) / 255.0, frac(data.x * 255.0), floor(data.y * 255.0) / 255.0, frac(data.y * 255.0));}
float unpack_divergence(float2 data) {return data.x + (data.y / 255.0);}
float2 pack_divergence(float data) {return float2(floor(data * 255.0) / 255.0, frac(data * 255.0));}
 
void main(in PS_INPUT IN, out PS_OUTPUT OUT) {
    float2 right = unpack_velocity(tex2D(gm_BaseTexture, IN.uv + float2(texel_size.x, 0.0))) - 128.0 / 255.0;
    float2 left = unpack_velocity(tex2D(gm_BaseTexture, IN.uv - float2(texel_size.x, 0.0))) - 128.0 / 255.0;
    float2 bottom = unpack_velocity(tex2D(gm_BaseTexture, IN.uv + float2(0.0, texel_size.y))) - 128.0 / 255.0;
    float2 top = unpack_velocity(tex2D(gm_BaseTexture, IN.uv - float2(0.0, texel_size.y))) - 128.0 / 255.0;
 
    float divergence = 0.5 * ((right.x - left.x) + (bottom.y - top.y));
 
    OUT.color_0 = float4(pack_divergence(saturate(divergence + 128.0 / 255.0)), 0.0, 0.0);
}

=====================================

struct PS_INPUT {
    float2 uv: TEXCOORD0;
};
 
struct PS_OUTPUT {
    float4 color_0: SV_TARGET0;
};
 
uniform sampler2D texture_divergence;
uniform float2 texel_size;
 
float unpack_pressure(float2 data) {return data.x + (data.y / 255.0);}
float2 pack_pressure(float data) {return float2(floor(data * 255.0) / 255.0, frac(data * 255.0));}
float unpack_divergence(float2 data) {return data.x + (data.y / 255.0);}
float2 pack_divergence(float data) {return float2(floor(data * 255.0) / 255.0, frac(data * 255.0));}
 
void main(in PS_INPUT IN, out PS_OUTPUT OUT) {
    float velocity_range = 10.0; 
    float pressure_range = 10.0;   
 
    float right = unpack_pressure(tex2D(gm_BaseTexture, IN.uv + float2(texel_size.x, 0.0)).xy) * pressure_range;
    float left = unpack_pressure(tex2D(gm_BaseTexture, IN.uv - float2(texel_size.x, 0.0)).xy) * pressure_range;
    float bottom = unpack_pressure(tex2D(gm_BaseTexture, IN.uv + float2(0.0, texel_size.y)).xy) * pressure_range;
    float top = unpack_pressure(tex2D(gm_BaseTexture, IN.uv - float2(0.0, texel_size.y)).xy) * pressure_range;
 
    float divergence = (unpack_divergence(tex2D(texture_divergence, IN.uv).xy) - 128.0 / 255.0) * velocity_range;
 
    float pressure = (left + right + top + bottom - divergence) * 0.25;
 
    OUT.color_0 = float4(pack_pressure(saturate(pressure / pressure_range)), 0.0, 0.0);
}

====================================

struct PS_INPUT {
    float2 uv: TEXCOORD0;
};
 
struct PS_OUTPUT {
    float4 color_0: SV_TARGET0;
};
 
uniform sampler2D texture_pressure;
uniform float2 texel_size;
 
float2 unpack_velocity(float4 data) {return float2(data.x + (data.y / 255.0), data.z + (data.w / 255.0));}
float4 pack_velocity(float2 data) {return float4(floor(data.x * 255.0) / 255.0, frac(data.x * 255.0), floor(data.y * 255.0) / 255.0, frac(data.y * 255.0));}
float unpack_pressure(float2 data) {return data.x + (data.y / 255.0);}
float2 pack_pressure(float data) {return float2(floor(data * 255.0) / 255.0, frac(data * 255.0));}
 
void main(in PS_INPUT IN, out PS_OUTPUT OUT) {
    float velocity_range = 10.0;
    float pressure_range = 10.0;
 
    float right = unpack_pressure(tex2D(texture_pressure, IN.uv + float2(texel_size.x, 0.0)).xy) * pressure_range;
    float left = unpack_pressure(tex2D(texture_pressure, IN.uv - float2(texel_size.x, 0.0)).xy) * pressure_range;
    float bottom = unpack_pressure(tex2D(texture_pressure, IN.uv + float2(0.0, texel_size.y)).xy) * pressure_range;
    float top = unpack_pressure(tex2D(texture_pressure, IN.uv - float2(0.0, texel_size.y)).xy) * pressure_range;
 
    float2 gradient = 0.5 * float2(right - left, bottom - top);
 
    float2 velocity = (unpack_velocity(tex2D(gm_BaseTexture, IN.uv)) - 128.0 / 255.0) * velocity_range;
 
    velocity -= gradient;
 
    OUT.color_0 = pack_velocity(saturate(velocity / velocity_range + 128.0 / 255.0));
}

=======================================

struct PS_INPUT {
    float2 uv: TEXCOORD0;
};
 
struct PS_OUTPUT {
    float4 color_0: SV_TARGET0;
    float4 color_1: SV_TARGET1;
};
 
uniform sampler2D texture_material_1;
uniform sampler2D texture_velocity;
uniform sampler2D texture_world;
uniform float2 texel_size;
uniform float dissipation;
uniform float time_step;
uniform float maccormack_amount;
 
float2 unpack_velocity(float4 data) {return float2(data.x + (data.y / 255.0), data.z + (data.w / 255.0));}
float unpack_alpha(float4 data) {return data.x + (data.y / 255.0) + (data.z / (255.0 * 255.0)) + (data.w / (255.0 * 255.0 * 255.0));}
float4 pack_alpha(float data) {return float4(floor(data * 255.0) / 255.0, frac(data * 255.0), frac(data * 255.0 * 255.0), frac(data * 255.0 * 255.0 * 255.0));}
 
void main(in PS_INPUT IN, out PS_OUTPUT OUT) {
    float velocity_range = 10.0;
    if (tex2D(texture_world, IN.uv).w == 0.0) {
        float2 velocity = (unpack_velocity(tex2D(texture_velocity, IN.uv)) - 128.0 / 255.0) * velocity_range;
 
        float2 was = IN.uv - time_step * texel_size * velocity;
        float phi_hat_next = tex2D(gm_BaseTexture, was).w + (tex2D(texture_material_1, was).w / 255.0);
        float2 phi_hat_next_velocity = (unpack_velocity(tex2D(texture_velocity, was)) - 128.0 / 255.0) * velocity_range;
 
        float2 to = IN.uv + time_step * texel_size * phi_hat_next_velocity;
        float phi_hat_now = tex2D(gm_BaseTexture, to).w + (tex2D(texture_material_1, to).w / 255.0);
 
        float phi_next = phi_hat_next + 0.5 * ((tex2D(gm_BaseTexture, IN.uv).w + (tex2D(texture_material_1, IN.uv).w / 255.0)) - phi_hat_now) * maccormack_amount;
        float color = phi_next;
 
        // Clamps color.
        float2 coord = round(was / texel_size) * texel_size;
        float top_left = tex2D(gm_BaseTexture, coord - 0.5 * texel_size).w + (tex2D(texture_material_1, coord - 0.5 * texel_size).w / 255.0);
        float bottom_right = tex2D(gm_BaseTexture, coord + 0.5 * texel_size).w + (tex2D(texture_material_1, coord + 0.5 * texel_size).w / 255.0);
        float top_right = tex2D(gm_BaseTexture, coord + float2(0.5 * texel_size.x, -0.5 * texel_size.y)).w + (tex2D(texture_material_1, coord + float2(0.5 * texel_size.x, -0.5 * texel_size.y)).w / 255.0);
        float bottom_left = tex2D(gm_BaseTexture, coord + float2(-0.5 * texel_size.x, 0.5 * texel_size.y)).w + (tex2D(texture_material_1, coord + float2(-0.5 * texel_size.x, 0.5 * texel_size.y)).w / 255.0);
        color = clamp(color, min(min(min(top_left, top_right), bottom_left), bottom_right), max(max(max(top_left, top_right), bottom_left), bottom_right));
 
        color = saturate(color - dissipation);
 
        OUT.color_0 = float4(0.0, 0.0, 0.0, floor(color * 255.0) / 255.0);
        OUT.color_1 = float4(0.0, 0.0, 0.0, frac(color * 255.0));
    } else {
        OUT.color_0 = float4(0.0, 0.0, 0.0, 0.0);
        OUT.color_1 = float4(0.0, 0.0, 0.0, 0.0);
    }
}